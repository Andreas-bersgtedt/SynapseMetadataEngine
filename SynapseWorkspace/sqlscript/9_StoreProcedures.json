{
	"name": "9_StoreProcedures",
	"properties": {
		"folder": {
			"name": "Run Me 1st"
		},
		"content": {
			"query": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_ADFGetDynamicRDBMSQuery]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_ADFGetDynamicRDBMSQuery];\nGO\nCREATE PROC [ME_Config].[sp_ADFGetDynamicRDBMSQuery] @DataSetType [VARCHAR](100),@RunGroupCode [VARCHAR](20) AS\nBEGIN\n\nSELECT\td.[DataSetType], \n\t\tDBServerName=C.[ConnectionString],\n\t\tDBName=C.[ConnectionName],\n\t\tSQLKVName=C.[ConnectionKVSecret]\n\t\t,SqlUserName=C.[ConnetionUserName]\n       ,[DataSetName]\n      ,[SchemaName]\n      ,DLContainer='metadata'\n\t  ,DLFolder='inbound'\n\t  ,DLFileName=LOWER(CONCAT(D.[SchemaName],'_',D.[DataSetName]))\n      ,SQLQuery=\tME_Config.fnGetRMDBSQuery(\n\t\t\t\t\tCONVERT(VARCHAR(20),D.id), \n\t\t\t\t\tCONVERT(VARCHAR(250),D.DataSetName),\n\t\t\t\t\tCONVERT(VARCHAR(250),D.SchemaName), \n\t\t\t\t\tCONVERT(VARCHAR(100),D.DataSetType)\n\t\t\t\t\t)\n      \nFROM\t[ME_Config].[DataSet] D\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.[ConnectionId]=C.id\n\nWHERE\tD.DataSetType=@DataSetType\n\t\tAND (D.RunGroupCode=@RunGroupCode OR @RunGroupCode='-1')\n\t\tAND D.IsEnabled < 2\n\nEND\nGO\n\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_AlterGlobals]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_AlterGlobals];\nGO\n\nCREATE PROC [ME_Config].[sp_AlterGlobals] @STORAGE_ACCOUNT [VARCHAR](4000),@STAGE_SCHEMA [VARCHAR](4000) AS\nBEGIN\n\nTRUNCATE TABLE [ME_Config].[GLOBALS]\n\nINSERT INTO [ME_Config].[GLOBALS]\nSELECT Attribute='STORAGE_ACCOUNT',AttributeValue=@STORAGE_ACCOUNT\nUNION ALL\nSELECT Attribute='STAGE_SCHEMA',AttributeValue=@STAGE_SCHEMA\n;\n\nDECLARE @SQL VARCHAR(4000)\n\nSET @SQL = 'CREATE SCHEMA ['+@STAGE_SCHEMA+']\n    AUTHORIZATION [dbo];'\n\n\nEXEC (@SQL)\n\n\n\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL];\nGO\n\nCREATE PROC [ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL] AS\nBEGIN\n  SELECT SQLQuery     = [ME_Config].[fnGetConfigurationSQLQuery](C.[Connectiontype], C.[Id]),\n         DataSetType  = C.Connectiontype, \n         DBServerName = C.[ConnectionString],\n         DBName       = C.[ConnectionName],\n         SQLKVName    = C.[ConnectionKVSecret],\n         SqlUserName  = C.[ConnetionUserName],\n         DLContainer  = 'metadata',\n         DLFolder     = 'me_config_dataset',\n         DLFileName   = LOWER(CONCAT(C.[ConnectionName], '_', C.[ConnectionKVSecret]))\n    FROM [ME_Config].[Connection] C\n   Where C.[id] not in (SELECT [ConnectionId] From [ME_Config].[DataSet]) and\n         C.[Connectiontype] IN ('MSSQL','MYSQL','AzMYSQL', 'ORACLE')\nEND\n\n\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_insertActivityEvent]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_insertActivityEvent];\nGO\nCREATE PROC [ME_Config].[sp_insertActivityEvent] @EventSource [varchar](50),@EventSourceID [varchar](100),@EventActivityName [varchar](100),@EventMessage [varchar](1000) AS\nBEGIN\nDECLARE @UTCDATE AS DATETIME\nSET @UTCDATE =  getUTCDATE()\n\nINSERT INTO [ME_Config].[ActivityLog]\n           ([EventSource]\n           ,[EventSourceID]\n           ,[EventActivityName]\n           ,[EventUTCTimestamp]\n           ,[EventMessage])\n     VALUES\n           (@EventSource,\n           @EventSourceID,\n           @EventActivityName,\n           @UTCDATE,\n           @EventMessage\n\t\t   )\nEND\nGO\n\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_LoadPrimeMetadata]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_LoadPrimeMetadata];\nGO\nCREATE PROC [ME_Config].[sp_LoadPrimeMetadata] AS\nBEGIN\n\t/*DEBUG\n\t\tSET @PARTITIONSTRING='2021/01/07/15/23'\n\t\tSET @DatasetID=25\n*/\n\t/*DECLARE GLOBALS*/\n\tDECLARE @STORAGE_ACCOUNT VARCHAR(500)\n\t\n\t\n\t/*SET GLOBAL PARAMETERS*/\n\tSET @STORAGE_ACCOUNT =(SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STORAGE_ACCOUNT')\n\n\t/*DECLARE LOCAL PARAMETERS*/\n\tDECLARE @SQLCOPYINTO VARCHAR(MAX);\n\tDECLARE @SourceConnnectionName VARCHAR(250)\n\t\n\n\t/*Get Source Database / Connection Name for use in target table name*/\n\tSET @SourceConnnectionName = ('https://'+@STORAGE_ACCOUNT+'.dfs.core.windows.net/metadata/me_config_dataset/*.parquet')\n\t\n\n\n\t/*Ensure Stage schema exists as defined in MF_Config.Globals*/\n\t\n\t/*Build out main metadata for dynamic SQL*/\n\n/*Build out Copy Into Statement*/\n\tSET @SQLCOPYINTO = (REPLACE('COPY INTO dbo.tbdxxxxx\n(DataSetType 1, RunGroupCode 2, DataSetName 3, SchemaName 4, TargetLake 5, ConnectionId 6, IsEnabled 7)\n  \n  FROM  ¬'+@SourceConnnectionName+ '¬\n  WITH\n(\n\tFILE_TYPE = ¬PARQUET¬\n\t,MAXERRORS = 0\n\t\t,COMPRESSION = ¬snappy¬\n\t,IDENTITY_INSERT = ¬OFF¬\n)\n\n  ', '¬', '''')\n\t\t\n\t\t\t)\n\t\n\t/*Build Out Drop and Recreate of StageTable*/\n\tPRINT @SQLCOPYINTO\n\n\nBEGIN TRY DROP TABLE dbo.tbdxxxxx END TRY BEGIN CATCH PRINT 'x' END CATCH\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE NAME = 'tbdxxxxx' AND TYPE = 'U')\nCREATE TABLE dbo.tbdxxxxx\n\t(\n\t\t [DataSetType] nvarchar(4000),\n\t [RunGroupCode] nvarchar(4000),\n\t [DataSetName] nvarchar(4000),\n\t [SchemaName] nvarchar(4000),\n\t [TargetLake] nvarchar(4000),\n\t [ConnectionId] nvarchar(4000),\n\t [IsEnabled] int\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t\n\t);\n\n\tEXEC (@SQLCOPYINTO)\n\n\tINSERT INTO [ME_Config].[DataSet]([DataSetType]\n      ,[RunGroupCode]\n      ,[DataSetName]\n      ,[SchemaName]\n      ,[TargetLake]\n      ,[ConnectionId]\n      ,[IsEnabled])\n\t\tSELECT * FROM dbo.tbdxxxxx;\nDROP TABLE dbo.tbdxxxxx\n\n\n\t\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_ADFGetSQLConfig]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_ADFGetSQLConfig];\nGO\nCREATE PROC [ME_Data].[sp_ADFGetSQLConfig] @DataSetType [VARCHAR](100),@RunGroupCode [VARCHAR](20) AS\nBEGIN\n\nSELECT\td.[DataSetType], \n\t\tDBServerName=C.[ConnectionString],\n\t\tDBName=C.[ConnectionName],\n\t\tSQLKVName=C.[ConnectionKVSecret]\n\t\t,SqlUserName=C.[ConnectionKVSecret]\n       ,D.[DataSetName]\n      ,D.[SchemaName]\n      ,DLContainer=LOWER(E.TargetLake)\n\t  ,DLFolder=LOWER(E.LakeFolder)\n\t  ,DLFileName=LOWER(CONCAT(D.[SchemaName],'_',D.[DataSetName]))\n      ,SQLQuery=CONVERT(NVARCHAR(MAX),'SELECT '+COLS.Cols/*[ME_Config].[fnGetRMDBSQuerySelectColumnNames](E.Id)*/+' FROM ['+E.[SchemaName]+'].['+E.[Name]+']')\n      \nFROM\t[ME_Config].[DataSet] D\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.[ConnectionId]=C.id\n\t\tINNER JOIN Metadata.Entity E ON D.Id=E.DatasetId AND D.[IsEnabled]=1\n\t\tINNER JOIN (   \n\t\t\t\t\tSELECT Cols=CONVERT(NVARCHAR(MAX),(ISNULL\t(\n\t\t\t\t\t\tSTRING_AGG('['+REPLACE([MetadataObjectName],' ','_')+']=['+[MetadataObjectName]+']',',')\n\t\t\t\t\t\tWITHIN GROUP ( ORDER BY [MetadataObjectOrder]  ASC  )\n\t\t\t\t\t\t,'*'\n\t\t\t\t\t\t))),EntityID\n\t\t\t\t\tFROM MEtadata.[object] \n\t\t\t\t\tWhere EntityID IN (\n\t\t\t\t\tSELECT DISTINCT EntityID \n\t\t\t\t\tFROM MEtadata.[object] \n\t\t\t\t\twhere [MetadataObjectName] LIKE '% %'\n\t\t\t\t\t\t\t\t\t\t) \n\t\t\t\t\t\t\t\t\t\tGROUP BY EntityID\n\t\t\t\t\t \n\t\t\t\t\t) AS COLS ON COLS.EntityID=E.Id\n\nWHERE\tD.DataSetType=@DataSetType\n\t\tAND (D.RunGroupCode=@RunGroupCode OR @RunGroupCode='-1')\n\t\tAND D.IsEnabled < 2\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_GetDynamicMSSQLQuery]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_GetDynamicMSSQLQuery];\nGO\nCREATE PROC [ME_Data].[sp_GetDynamicMSSQLQuery] @DataSetType [VARCHAR](100),@ExecutionGroup [VARCHAR](10),@ExecutionPlane [VARCHAR](10) AS\nBEGIN\n\tDECLARE @PARTITION VARCHAR(50)\n\n\tSET @PARTITION = (\n\t\t\tSELECT REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(16), GETUTCDATE(), 120), '-', '\\'), ' ', '\\'), ':', '\\')\n\t\t\t)\n\n\tSELECT [DataSetType]\n\t\t,DBServerName\n\t\t,DBName\n\t\t,SQLKVName\n\t\t,SqlUserName\n\t\t,[DataSetName]\n\t\t,[SchemaName]\n\t\t,DLContainer\n\t\t,DLFolder = DLFolder + '\\' + @PARTITION\n\t\t,DLFileName\n\t\t,SQLQuery = CONVERT(NVARCHAR(MAX), 'SELECT ' + Cols + CASE \n\t\t\t\tWHEN [DataSetType] LIKE '%MSSQL'\n\t\t\t\t\tTHEN ' FROM [' + [SchemaName] + '].[' + [Name] + ']'\n\t\t\t\tWHEN [DataSetType] LIKE '%ORACLE'\n\t\t\t\t\tTHEN ' FROM \"' + [SchemaName] + '\".\"' + [Name] + '\"'\n\t\t\t\tELSE ' FROM `' + [SchemaName] + '`.`' + [Name] + '`'\n\t\t\t\tEND + WhereClause)\n\t\t,Cols\n\t\t,DataSetID = ID\n\t\t,[Target_Partition] = REPLACE(@PARTITION, '\\', '/')\n\tFROM (\n\t\tSELECT d.[DataSetType]\n\t\t\t,DBServerName = C.[ConnectionString]\n\t\t\t,DBName = C.[ConnectionName]\n\t\t\t,SQLKVName = C.[ConnectionKVSecret]\n\t\t\t,SqlUserName = C.[ConnetionUserName]\n\t\t\t,D.[DataSetName]\n\t\t\t,D.[SchemaName]\n\t\t\t,DLContainer = LOWER(E.TargetLake)\n\t\t\t,DLFolder = LOWER(E.LakeFolder)\n\t\t\t,DLFileName = LOWER(CONCAT (\n\t\t\t\t\tD.[SchemaName]\n\t\t\t\t\t,'_'\n\t\t\t\t\t,D.[DataSetName]\n\t\t\t\t\t))\n\t\t\t,E.[Name]\n\t\t\t,D.ID\n\t\t\t--\n\t\t\t,Cols = CONVERT(NVARCHAR(MAX), (\n\t\t\t\t\tISNULL(STRING_AGG((\n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN d.[DataSetType] = 'MSSQL'\n\t\t\t\t\t\t\t\t\t\tTHEN '[' + o.[MetadataObjectName] + ']  AS [' + REPLACE(o.[MetadataObjectName], ' ', '_') + ']'\n\t\t\t\t\t\t\t\t\tWHEN d.[DataSetType] = 'ORACLE'\n\t\t\t\t\t\t\t\t\t\tTHEN '\"' + o.[MetadataObjectName] + '\"  AS \"' + REPLACE(o.[MetadataObjectName], ' ', '_') + '\"'\n\t\t\t\t\t\t\t\t\tELSE '`' + o.[MetadataObjectName] + '`  AS `' + REPLACE(o.[MetadataObjectName], ' ', '_') + '`'\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t), ',') WITHIN GROUP (\n\t\t\t\t\t\t\tORDER BY o.[MetadataObjectOrder] ASC\n\t\t\t\t\t\t\t), '*')\n\t\t\t\t\t))\n\t\t\t,WhereClause = CASE \n\t\t\t\tWHEN DC.EntityID IS NULL\n\t\t\t\t\tTHEN ''\n\t\t\t\tELSE CONCAT (\n\t\t\t\t\t\t' Where '\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereCol\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereOperator\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.wherevalue\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t)\n\t\t\t\tEND\n\t\t--SELECT *\n\t\tFROM [Metadata].[Entity] E\n\t\tINNER JOIN [ME_Config].[DataSet] D ON D.id = e.datasetid\n\t\t\tAND D.[IsEnabled] = 1\n\t\t\tAND d.[DataSetType] LIKE @DataSetType\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.CONNECTIONID = C.ID\n\t\tINNER JOIN [Metadata].[Object] o ON o.EntityID = E.id\n\t\tLEFT OUTER JOIN Metadata.DeltaConfig DC ON DC.EntityID = E.id\n\t\tGROUP BY d.[DataSetType]\n\t\t\t,C.[ConnectionString]\n\t\t\t,C.[ConnectionName]\n\t\t\t,C.[ConnectionKVSecret]\n\t\t\t,C.[ConnectionKVSecret]\n\t\t\t,D.[DataSetName]\n\t\t\t,D.[SchemaName]\n\t\t\t,LOWER(E.TargetLake)\n\t\t\t,LOWER(E.LakeFolder)\n\t\t\t,LOWER(CONCAT (\n\t\t\t\t\tD.[SchemaName]\n\t\t\t\t\t,'_'\n\t\t\t\t\t,D.[DataSetName]\n\t\t\t\t\t))\n\t\t\t,E.[Name]\n\t\t\t,D.ID\n\t\t\t,C.[ConnetionUserName]\n\t\t\t,CASE \n\t\t\t\tWHEN DC.EntityID IS NULL\n\t\t\t\t\tTHEN ''\n\t\t\t\tELSE CONCAT (\n\t\t\t\t\t\t' Where '\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereCol\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereOperator\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.wherevalue\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t)\n\t\t\t\tEND\n\t\t) AS X\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_ProcessDynamicStagedMetadata]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_ProcessDynamicStagedMetadata];\nGO\n\nCREATE PROC [ME_Data].[sp_ProcessDynamicStagedMetadata] @DataSetType [VARCHAR](100) AS\nBEGIN\n--Initial Reset... \nBEGIN TRY \nDROP TABLE #TTAttribute\nDROP TABLE #TTBase\nDROP TABLE #TTOBJECT\nDROP TABLE #TTEntity\nDROP TABLE #Attribute\nDROP TABLE #OBJECT\nDROP TABLE #Entity\nEND TRY\nBEGIN CATCH\nPRINT 'Seems as if the temp tables were not there :)'\nEND CATCH\n\n\n\n\n--Lock In Reslults\nSELECT [MetadataQuerySource]\n      ,[MetadataEntityName]\n      ,[MetadataSchemaName]\n      ,[MetadataObjectName]\n      ,[MetadataObjectType]\n      ,[MetadataObjectlength]\n      ,[MetadataObjectPrecision]\n      ,[MetadataObjectScale]\n      ,[MetadataObjectCollation]\n      ,[DataSetID]\n      ,[MetadataObjectOrder]\n      ,[MetadataObjectIdentityFlag]\n      ,[MetadataObjectRefreshUTCTimeStamp]\n\n\t  ,MetadataObjectHash=CONVERT(BIGINT,HASHBYTES('SHA1',CONCAT([DataSetID],'¬'\n      ,[MetadataObjectName])))\n\t   \n\tINTO #TTBase\n\t--SELECT *\n  FROM [ME_Data].[MetadataEntityStage]\n  WHERE [MetadataQuerySource]='Dynamic' \n\t\tAND DATASETID IN\t(\n\t\t\t\t\t\t\tSELECT id \n\t\t\t\t\t\t\tfrom [ME_Config].[DataSet] \n\t\t\t\t\t\t--\twhere @DataSetType=DataSetType\n\t\t\t\t\t\t\t)\n\n--Get All Distinct Entities\n--DROP TABLE #TTEntity\nSELECT DISTINCT [DataSetID],[MetadataEntityName]\n      ,[MetadataSchemaName]\nINTO #TTEntity\nFROM #TTBase\n\n--Build Up Objects\nSELECT [DataSetID]\n      ,[MetadataObjectName]\n\t  ,[MetadataObjectOrder]\n\t  ,MetadataObjectHash\n\t  ,[MetadataObjectRefreshUTCTimeStamp]=MAX([MetadataObjectRefreshUTCTimeStamp])\nINTO #TTOBJECT\nFROM #TTBase\nGROUP BY [DataSetID]\n      ,[MetadataObjectName]\n\t  ,MetadataObjectHash\n\t  ,[MetadataObjectOrder]\n\n\n--Build Attribute KVP Table\nSELECT *\nINTO #TTAttribute\nFROM (\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataType')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),[MetadataObjectType])\n\t\t,[KeyValueDataType]=CONVERT(VARCHAR(50),'String')\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeSize')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectlength)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypePrecision')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectPrecision)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeScale')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectScale)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeCollation')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectCollation)\n\t\t,[KeyValueDataType]='String'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nWHERE ISNULL(MetadataObjectCollation,'') !=''\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectIdentityFlag')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectIdentityFlag)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\n) X\n\n\n\nSELECT E.*,D.TargetLake,LakeFolder=CONCAT(D.id\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,D.DataSetType\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,E.[MetadataSchemaName]\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,E.[MetadataEntityName]) \n\t\t,RecordProcessTimestamp=GETUTCDATE()\nINTO #Entity\nFROM #TTEntity E\nINNER JOIN [ME_Config].[DataSet] D ON D.id=E.DataSetID\n\nSELECT * ,RecordProcessTimestamp=GETUTCDATE()\nINTO #Object\nFROM #TTOBJECT\n\nSELECT * ,RecordProcessTimestamp=GETUTCDATE()\nINTO #Attribute\nFROM #TTAttribute\n\n\n--Update Metadata.Entity table\nUPDATE t\nSET \n       t.[Name]=s.[MetadataEntityName]\n      ,t.[SchemaName]=s.[MetadataSchemaName]\n      ,t.[TargetLake]=s.[TargetLake]\n      ,t.[LakeFolder]=s.[LakeFolder]\n      ,t.[RecordProcessTimestamp]=s.[RecordProcessTimestamp]\nFROM [Metadata].[Entity] t \nINNER JOIN  #Entity s ON s.[DataSetId] = t.[DataSetId]\n\n\n\tINSERT INTO [Metadata].[Entity] ([DataSetId]\n      ,[Name]\n      ,[SchemaName]\n      ,[TargetLake]\n      ,[LakeFolder]\n      ,[RecordProcessTimestamp]\n\t  ,CreatedUTCTimestamp)\n\t  SELECT DISTINCT s.[DataSetId]\n      ,s.[MetadataEntityName]\n      ,s.[MetadataSchemaName]\n      ,s.[TargetLake]\n      ,s.[LakeFolder]\n      ,s.[RecordProcessTimestamp]\n\t  ,CreatedUTCTimestamp=GETUTCDATE()\n\t  FROM #Entity s \n\t  LEFT OUTER JOIN  [Metadata].[Entity] t\n\t  ON s.[DataSetId] = t.[DataSetId]\n\t  WHERE t.[DataSetId] IS NULL\n\t;\n\n\n\t\n\n--Update Metadata Object Table \n\nUPDATE t\nSET \n        t.[MetadataObjectOrder]\t\t=s.[MetadataObjectOrder]\n       ,t.[RecordProcessTimestamp]\t=s.[RecordProcessTimestamp]\nFROM [Metadata].[Object] t \nINNER JOIN  (\n\t\t\tSELECT o.*, [EntityId]=E.id \n\t\t\tFROM #Object o \n\t\t\tINNER JOIN [Metadata].[Entity] E \n\t\t\tON E.[DataSetId]=o.[DataSetId]\n\t\t\t) s ON s.[MetadataObjectHash] = t.[MetadataObjectHash];\n\nINSERT INTO [Metadata].[Object]([EntityId]\n\t\t\t\t,[DataSetID]\n\t\t\t\t,[MetadataObjectName]\n\t\t\t\t,[MetadataObjectOrder]\n\t\t\t\t,[MetadataObjectHash]\n\t\t\t\t,[MetadataObjectRefreshUTCTimeStamp]\n\t\t\t\t,[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp\n\t\t\t\t)\n         SELECT s.[EntityId]\n\t\t\t\t,s.[DataSetID]\n\t\t\t\t,s.[MetadataObjectName]\n\t\t\t\t,s.[MetadataObjectOrder]\n\t\t\t\t,s.[MetadataObjectHash]\n\t\t\t\t,s.[MetadataObjectRefreshUTCTimeStamp]\n\t\t\t\t,s.[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp=GETUTCDATE()\n\tFROM   (\n\t\t\tSELECT o.*, [EntityId]=E.id \n\t\t\tFROM #Object o \n\t\t\tINNER JOIN [Metadata].[Entity] E \n\t\t\tON E.[DataSetId]=o.[DataSetId]\n\t\t\t) s \n\tWHERE s.[MetadataObjectHash] NOT IN (SELECT [MetadataObjectHash] FROM [Metadata].[Object] WITH (NOLOCK))\n\t\n\n\n\n\n--Update Metadata Attribute Table \n\nUPDATE t\nSET \n        t.[Value]=s.[Value]\n       ,t.[KeyValueRefreshDate]=s.[KeyValueRefreshDate]\n       ,t.[RecordProcessTimestamp]\t=s.[RecordProcessTimestamp]\nFROM [Metadata].[Attribute] t \nINNER JOIN  (\n\t\t\tSELECT o.*, [EntityId]=E.[EntityId] ,[ObjectId]=E.[Id] \n\t\t\tFROM #Attribute o \n\t\t\tINNER JOIN [Metadata].[Object] E \n\t\t\tON E.[MetadataObjectHash]=o.[MetadataObjectHash]\n\t\t\t) s ON (s.[MetadataObjectHash] = t.[MetadataObjectHash] and S.[Key]=T.[Key]);\n\n\nINSERT INTO [Metadata].[Attribute] ([EntityId]\n\t\t\t\t,[ObjectId]\n\t\t\t\t,[MetadataObjectHash]\n\t\t\t\t,[DataSetID]\n\t\t\t\t,[KEY]\n\t\t\t\t,[Value]\n\t\t\t\t,[KeyValueDataType]\n\t\t\t\t,[KeyValueRefreshDate]\n\t\t\t\t,[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp\n\t\t\t\t)\n\t\t\tSELECT s.[EntityId]\n\t\t\t\t,s.[ObjectId]\n\t\t\t\t,s.[MetadataObjectHash]\n\t\t\t\t,s.[DataSetID]\n\t\t\t\t,s.[KEY]\n\t\t\t\t,s.[Value]\n\t\t\t\t,s.[KeyValueDataType]\n\t\t\t\t,s.[KeyValueRefreshDate]\n\t\t\t\t,s.[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp=GETUTCDATE()\n\t\t\tFROM \n\t\t\t(\n\t\t\t\tSELECT o.*, [EntityId]=E.[EntityId] ,[ObjectId]=E.[Id] \n\t\t\t\tFROM #Attribute o \n\t\t\t\tINNER JOIN [Metadata].[Object] E \n\t\t\t\tON E.[MetadataObjectHash]=o.[MetadataObjectHash]\n\t\t\t) s \n\t\t\tLEFT OUTER JOIN [Metadata].[Attribute]  t ON s.[MetadataObjectHash] = t.[MetadataObjectHash] and S.[Key]=T.[Key] \n\t\t\tWHERE t.[MetadataObjectHash] IS NULL;\n\n--Purge stage table of data\nDELETE  FROM [ME_Data].[MetadataEntityStage]\nWHERE CONVERT(BIGINT,HASHBYTES('SHA1',CONCAT([DataSetID],'¬'\n      ,[MetadataObjectName]))) IN (SELECT DISTINCT MetadataObjectHash FROM #TTBase)\n--Cleanup\nDROP TABLE #TTAttribute\nDROP TABLE #TTBase\nDROP TABLE #TTOBJECT\nDROP TABLE #TTEntity\nDROP TABLE #Attribute\nDROP TABLE #OBJECT\nDROP TABLE #Entity\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[InsertDataStageEntry]') AND TYPE = 'P ') DROP PROC [ME_Stage].[InsertDataStageEntry];\nGO\n\nCREATE PROC [ME_Stage].[InsertDataStageEntry] @Partition_String [VARCHAR](100),@DatasetID [INT],@Row_Count [BIGINT] AS \nBEGIN\n\nINSERT INTO  ME_Stage.RawPartitionStage\n\t\t\t(\n\t\t\tDatasetID,\tPartition_String,\tRow_Count,\tInsertTimestamp\n\t\t\t)\nSELECT\t\t@DatasetID,\t@Partition_String,\t@Row_Count,\tGETUTCDATE()\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_DynamicStageLoad]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_DynamicStageLoad];\nGO\n\nCREATE PROC [ME_Stage].[sp_DynamicStageLoad] @PARTITIONSTRING [VARCHAR](100),@DatasetID [INT] AS\nBEGIN\n\t/*DEBUG\n\t\tSET @PARTITIONSTRING='2021/01/07/15/23'\n\t\tSET @DatasetID=25\n*/\n\t/*DECLARE GLOBALS*/\n\tDECLARE @TARGETSCHEMA VARCHAR(100)\n\t\t,@STORAGE_ACCOUNT VARCHAR(500)\n\t\n\t\n\t/*SET GLOBAL PARAMETERS*/\n\tSET @STORAGE_ACCOUNT =(SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STORAGE_ACCOUNT')\n\tSET @TARGETSCHEMA = (SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STAGE_SCHEMA')\n\n\t/*DECLARE LOCAL PARAMETERS*/\n\tDECLARE @SQLCREATESTAGETABLE VARCHAR(MAX);\n\tDECLARE @SQLCOPYINTO VARCHAR(MAX);\n\tDECLARE @SQLSCHEMACREATE VARCHAR(MAX);\n\tDECLARE @SourceConnnectionName VARCHAR(250)\n\t\n\n\t/*Get Source Database / Connection Name for use in target table name*/\n\tSET @SourceConnnectionName = (\n\t\t\tSELECT TOP 1 [ConnectionName]\n\t\t\tFROM ME_CONFIG.Connection c\n\t\t\tINNER JOIN ME_Config.Dataset D ON D.ConnectionID = C.ID\n\t\t\t\tAND D.ID = @DatasetID\n\t\t\t)\n\t\n\n\n\t/*Ensure Stage schema exists as defined in MF_Config.Globals*/\n\tSET @SQLSCHEMACREATE = (SELECT REPLACE('BEGIN TRY DECLARE @X AS VARCHAR(4000) SET @X=¬CREATE SCHEMA '+@TARGETSCHEMA+' AUTHORIZATION dbo¬ EXEC (@X) END TRY BEGIN CATCH PRINT 1 END CATCH' ,'¬',''''))\n\t/*Flush Out Temp Tables*/\n\t\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\n\t\n\t/*Build out main metadata for dynamic SQL*/\n\n\tSELECT DISTINCT o.[Id]\n\t\t,o.[EntityId]\n\t\t,o.[DataSetID]\n\t\t,o.[MetadataObjectName]\n\t\t,o.[MetadataObjectOrder]\n\t\t,o.[MetadataObjectHash]\n\t\t,o.[MetadataObjectRefreshUTCTimeStamp]\n\t\t,o.[RecordProcessTimestamp]\n\t\t,o.[CreatedUTCTimestamp]\n\t\t,e.[TargetLake]\n\t\t,e.[LakeFolder]\n\t\t,e.[SchemaName]\n\t\t,EntityName = e.[Name]\n\t\t,[ObjectDataType] = DT.[Value]\n\t\t,[ObjectDataTypeSize] = DTL.[Value]\n\t\t,[ObjectDataTypePrecision] = DTP.[Value]\n\t\t,[ObjectDataTypeScale] = DTPS.[Value]\n\t\t,DATATYPE = [ME_Config].[fnGetDatatypedeff](DS.[DataSetType], DT.[Value], DTL.[Value], DTP.[Value], DTPS.[Value])\n\tINTO #TTBaseData\n\tFROM [Metadata].[Object] O\n\tINNER JOIN [ME_Config].[DataSet] DS ON O.DataSetId = DS.ID\n\tINNER JOIN Metadata.Entity E ON O.EntityId = E.id\n\t\tAND E.DatasetId = @DatasetID\n\tINNER JOIN [Metadata].[Attribute] DT ON o.id = DT.ObjectID\n\t\tAND DT.EntityId = E.id\n\t\tAND DT.[KEY] = 'ObjectDataType'\n\tINNER JOIN [Metadata].[Attribute] DTL ON o.id = DTL.ObjectID\n\t\tAND DTL.EntityId = E.id\n\t\tAND DTL.[KEY] = 'ObjectDataTypeSize'\n\tINNER JOIN [Metadata].[Attribute] DTP ON o.id = DTP.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTP.[KEY] = 'ObjectDataTypePrecision'\n\tINNER JOIN [Metadata].[Attribute] DTPS ON o.id = DTPS.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTPS.[KEY] = 'ObjectDataTypeScale'\n\n/*Build out Copy Into Statement*/\n\tSET @SQLCOPYINTO = (\n\t\t\tSELECT TOP 1 REPLACE('COPY INTO [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + ']\n  \n  FROM  ¬https://' + @STORAGE_ACCOUNT + '.dfs.core.windows.net/' + LOWER([TargetLake]) + CASE WHEN LEN([LakeFolder])=0 THEN '' ELSE '/' END + LOWER(REPLACE([LakeFolder], '\\', '/')) + CASE WHEN LEN(@PARTITIONSTRING)=0 THEN'' ELSE '/' END + LOWER(REPLACE(@PARTITIONSTRING, '\\', '/')) + '/*.parquet¬\n  WITH\n(\n\tFILE_TYPE = ¬PARQUET¬\n\t,MAXERRORS = 0\n\t,COMPRESSION = ¬snappy¬\n\t,IDENTITY_INSERT = ¬OFF¬\n)\n\n  ', '¬', '''')\n\t\t\tFROM #TTBaseData\n\t\t\t)\n\t\n\t/*Build Out Drop and Recreate of StageTable*/\n\tSET @SQLCREATESTAGETABLE = (\n\t\t\tSELECT 'BEGIN TRY DROP TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] END TRY BEGIN CATCH PRINT 1 END CATCH \n\t\tCREATE TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] \n\t\t( \n\t\t' + CONVERT(NVARCHAR(MAX), (\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tSTRING_AGG('[' + o.[MetadataObjectName] + '] ' + o.[DATATYPE] + ' ', ',') WITHIN GROUP (\n\t\t\t\t\t\t\t\t\tORDER BY o.[MetadataObjectOrder] ASC\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)) + ') WITH\n\t\t\t(\n\t\t\tDISTRIBUTION = ROUND_ROBIN,\n\t\t\t/*CLUSTERED COLUMNSTORE INDEX*/\n\t  \t\tHEAP\n\t\t\t)\n\t\t\t\n\t\t\t'\n\t\t\tFROM #TTBaseData o\n\t\t\tGROUP BY SchemaName\n\t\t\t\t,EntityName\n\t\t\t)\n\n\n/*Execute Dynamic SQL in sequence*/\n\n\n\tPRINT 'Creating Stage Table'\nprint @SQLCREATESTAGETABLE\n\tEXEC (@SQLCREATESTAGETABLE)\n\n\tPRINT 'Loading Stage Table'\n\n\tEXEC (@SQLCOPYINTO)\n\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\n\n\tEXEC ME_Stage.sp_ProcessLiveData @DatasetID\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_GetStagePartitions]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_GetStagePartitions];\nGO\n\nCREATE PROC [ME_Stage].[sp_GetStagePartitions] AS\nBEGIN\nSELECT [Id]\n      ,[DatasetID]\n      ,[Partition_String]\n      ,[Row_Count]\n      ,[InsertTimestamp]\n      ,[Status]\n  FROM [ME_Stage].[RawPartitionStage]\n\n  WHERE STATUS=0\n  ORDER BY [InsertTimestamp]\n\n  END\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_ProcessLiveData]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_ProcessLiveData];\nGO\n\nCREATE PROC [ME_Stage].[sp_ProcessLiveData] @DATASETID [INT] AS\nBEGIN\n\n/*GLOBALS*/\n  DECLARE\t@PARTITIONID\tINT, \n\t\t\t@STAGECOLS\t\tVARCHAR(MAX), \n\t\t\t@LIVECOLS\t\tVARCHAR(MAX), \n\t\t\t@BUSINESSKEY\tVARCHAR(100), \n\t\t\t@STAGETABLE\t\tVARCHAR(1000), \n\t\t\t@LIVETABLE\t\tVARCHAR(1000), \n\t\t\t@PARTITIONNAME\tVARCHAR(255),\n\t\t\t@STAGESCHEMA\tVARCHAR(200), \n\t\t\t@LIVESCHEMA\t\tVARCHAR(200),\n\t\t\t@HASDELTA\t\tINT,\n\t\t\t@TABLE_ACTION\tVARCHAR(10), \n\t\t\t@TARGET_DIST\tVARCHAR(1000)\n--ENTITYROWIDENTIFIER\n--ENTITYDELTACOLUMN\n--ENTITYDELTAOPERATOR\n--ENTITYDELTAVALUE\n--598#\n--TRUNCATE TABLE [ME_STAGE].[RAWPARTITIONSTAGE]\n  --SELECT * FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n/*SET GLABAL VARIABLES*/\n  SET @PARTITIONID = (SELECT TOP 1 ID \n\t\t\t\t\t  FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n\t\t\t\t\t  WHERE DATASETID=@DATASETID AND [STATUS] = 1\n\t\t\t\t\t  ORDER BY INSERTTIMESTAMP ASC\n\t\t\t\t\t  )\nSET @PARTITIONNAME = (SELECT TOP 1 Partition_String \n\t\t\t\t\t  FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n\t\t\t\t\t  WHERE DATASETID=@DATASETID AND [STATUS] = 1\n\t\t\t\t\t  ORDER BY INSERTTIMESTAMP DESC)\nSET @STAGESCHEMA\t= (SELECT ATTRIBUTEVALUE FROM [ME_CONFIG].[GLOBALS] WHERE ATTRIBUTE ='STAGE_SCHEMA')\nSET @LIVESCHEMA\t\t= (SELECT TOP 1 C.CONNECTIONNAME +'_'+ D.SCHEMANAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)\nSET @LIVETABLE\t\t= (SELECT TOP 1 D.DATASETNAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)\nSET @STAGETABLE\t\t= (@LIVESCHEMA+'_'+@LIVETABLE)\nSET @BUSINESSKEY\t= (SELECT STRING_AGG('[' + [Value] + ']', ',') WITHIN GROUP (ORDER BY CreatedUTCTimestamp ASC) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='EntityRowIdentifier')\nSET @HASDELTA\t\t= (SELECT COUNT(1) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITYDELTACOLUMN')\nSET @TARGET_DIST\t= (SELECT [Value] FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITY_MPP_DIST')\n\nSET @TABLE_ACTION\t= (SELECT CASE\tWHEN @PARTITIONID IS NOT NULL THEN \n\t\t\t\t\t\t\t\t\tCASE\tWHEN @BUSINESSKEY IS NULL\t\tAND @HASDELTA\t<1\tTHEN 'D_CTAS' /*DROP AND RELOAD NO BUSINESS KEY AND NO DELTA CONFIG*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS  NULL\t\tAND @HASDELTA\t>=1\tTHEN 'INSERT' /*INCREMENTAL INSERT ASSUME DELTA IS ACCURATE FROM SOURCE*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS  NOT NULL\tAND @HASDELTA\t< 1\tTHEN 'BKISRT' /*INCREMENTAL INSERT FILTER WITH BUSINESS KEY*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS NOT NULL\tAND @HASDELTA\t>=1 THEN 'U_CTAS' /*UPSERT USING CTAS AND RENAME OBJECT PROCESS*/\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tELSE 'EXIT' END);\n\n/*DYNAMIC SQL VARIABLES*/\nDECLARE @LIVEINSERTSQL VARCHAR(MAX), @SCHEMASQL VARCHAR(MAX), @RENAMESQL VARCHAR(MAX)\n\n/*BUILD COLUMN SCHEMA*/\nSET @STAGECOLS = (SELECT STRING_AGG('[' + COLUMN_NAME + ']',',') WITHIN GROUP (ORDER BY ORDINAL_POSITION ASC) FROM INFORMATION_SCHEMA.COLUMNS\tWHERE TABLE_NAME= @STAGETABLE AND TABLE_SCHEMA=@STAGESCHEMA)\n\n\t\t\t\t\t\t\n\n/*BUILD DYNAMIC SQL*/\n\nSET @SCHEMASQL = 'CREATE SCHEMA '+@LIVESCHEMA+' AUTHORIZATION dbo'\n\nIF @TABLE_ACTION = 'D_CTAS' SET @LIVEINSERTSQL =REPLACE('IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'];\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬) FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'INSERT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'BKISRT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION\t= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t'+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'U_CTAS' SET @LIVEINSERTSQL =REPLACE('IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*UNSEEN RECORDS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION\t= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[ME_ETL_ROW_DATE] = GETUTCDATE()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*UPDATED RECORDS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID],[ME_ETL_ROW_DATE])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t'+REPLACE(@STAGECOLS,'[','A.[')+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[ME_ETL_ROW_DATE] = GETUTCDATE()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] A\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*GET ALL UPSERT BUSINESS KEYS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT [BK_HASH_ID] INTO #'+@STAGETABLE+' FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*GENERATE FINAL SWITCH TABLE*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE [BK_HASH_ID] NOT IN (SELECT [BK_HASH_ID] FROM #'+@STAGETABLE+');\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* CLEAN UP */\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]  END TRY BEGIN CATCH PRINT 3 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION != 'EXIT' AND @TABLE_ACTION = 'U_CTAS' SET @RENAMESQL = (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tREPLACE('/*SWITCH OUT*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'] TO ['+@LIVETABLE+'_TBD]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH] TO ['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_TBD]  END TRY BEGIN CATCH PRINT 4 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t','¬','''')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nSELECT @LIVESCHEMA,@LIVETABLE,@TARGET_DIST,@STAGECOLS,@PARTITIONNAME,@TABLE_ACTION\n\nPRINT @SCHEMASQL\nPRINT '-----------------------------------'\nPRINT @LIVEINSERTSQL\n\n\n\nBEGIN TRY \nIF @TABLE_ACTION != 'EXIT' EXEC (@SCHEMASQL)\nEND TRY\nBEGIN CATCH\nPRINT 'Target Schema Already Exists'\nEND CATCH\n\nBEGIN TRY\nIF @TABLE_ACTION != 'EXIT' EXEC (@LIVEINSERTSQL)\n\n\nEND TRY\nBEGIN CATCH\n\tTHROW 51000,  'INSERT FAILED', 1;  \nEND CATCH\nIF @TABLE_ACTION != 'EXIT' EXEC (@RENAMESQL);\nIF @TABLE_ACTION != 'EXIT' UPDATE\t[ME_STAGE].[RAWPARTITIONSTAGE] SET [STATUS] = 2 WHERE ID =@PARTITIONID;\n\n\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_UpdateStagePartition]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_UpdateStagePartition];\nGO\n\nCREATE PROC [ME_Stage].[sp_UpdateStagePartition] @Partitionid [int],@State [Int] AS\nBEGIN\n\n  UPDATE [ME_Stage].[RawPartitionStage]\n  SET [Status]=@State\n\n  WHERE id =@Partitionid\n\n\n  END\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Metadata].[sp_manage_UniqueKey_Attribute]') AND TYPE = 'P ') DROP PROC [Metadata].[sp_manage_UniqueKey_Attribute];\nGO\n\nCREATE PROC [Metadata].[sp_manage_UniqueKey_Attribute] @EntityId [bigint],@RowIdColumn [VARCHAR](MAX),@ACTION [VARCHAR](10) AS\nBEGIN\n\t/*\n--DEBUG\nDECLARE @EntityId bigint , @DeltaColumn VARCHAR(MAX), @RowIdColumn VARCHAR(MAX), @DeltaOperator VARCHAR(MAX), @DeltaSeedValue VARCHAR(MAX)\n\n\nSET @EntityId = 477\nSET  @RowIdColumn = 'rowguid'\n--SET  @DeltaColumn = 'ModifiedDate'\n--SET  @DeltaOperator = '>='\n--DEBUG\n*/\n\t/*DECLARE CONSTANTS*/\n\tDECLARE @RIDKEY VARCHAR(MAX) = 'EntityRowIdentifier'\n\t/*Declare Globals*/\n\tDECLARE @DataSetID BIGINT\n\t\t,@DeltaDataType VARCHAR(MAX)\n\n\tSET @DataSetID = (\n\t\t\tSELECT DataSetID\n\t\t\tFROM [Metadata].[Entity]\n\t\t\tWHERE id = @EntityId\n\t\t\t)\n\n\t/*Flush Previous Data*/\n\tIF @ACTION = 'D'\n\t\tDELETE\n\t\tFROM [Metadata].[Attribute]\n\t\tWHERE ID IN (\n\t\t\t\tSELECT v.id\n\t\t\t\tFROM [Metadata].[Attribute] v\n\t\t\t\tWHERE v.[Key] = @RIDKEY\n\t\t\t\t\tAND v.Entityid = @EntityId\n\t\t\t\t)\n\n\tINSERT INTO [Metadata].[Attribute] (\n\t\t[EntityId]\n\t\t,[ObjectId]\n\t\t,[MetadataObjectHash]\n\t\t,[DataSetID]\n\t\t,[KEY]\n\t\t,[Value]\n\t\t,[KeyValueDataType]\n\t\t,[KeyValueRefreshDate]\n\t\t,[RecordProcessTimestamp]\n\t\t,[CreatedUTCTimestamp]\n\t\t)\n\tSELECT *\n\tFROM (\n\t\tSELECT [EntityId] = @EntityId\n\t\t\t,[ObjectId] = NULL\n\t\t\t,[MetadataObjectHash] = NULL\n\t\t\t,[DataSetID] = @DataSetID\n\t\t\t,[KEY] = @RIDKEY\n\t\t\t,[Value] = @RowIdColumn\n\t\t\t,[KeyValueDataType] = 'String'\n\t\t\t,[KeyValueRefreshDate] = getutcdate()\n\t\t\t,[RecordProcessTimestamp] = getutcdate()\n\t\t\t,[CreatedUTCTimestamp] = getutcdate()\n\t\t) AS XX\n\n\tSELECT v.*\n\tFROM [Metadata].[Attribute] v\n\tWHERE v.[Key] = @RIDKEY\n\t\tAND v.Entityid = @EntityId\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Metadata].[sp_prime_Delta_Attribute]') AND TYPE = 'P ') DROP PROC [Metadata].[sp_prime_Delta_Attribute];\nGO\n\nCREATE PROC [Metadata].[sp_prime_Delta_Attribute] @EntityId [bigint],@DeltaColumn [VARCHAR](MAX),@DeltaOperator [VARCHAR](MAX),@DeltaSeedValue [VARCHAR](MAX) AS\nBEGIN\n/*\n--DEBUG\nDECLARE @EntityId bigint , @DeltaColumn VARCHAR(MAX), @RowIdColumn VARCHAR(MAX), @DeltaOperator VARCHAR(MAX), @DeltaSeedValue VARCHAR(MAX)\n\n\nSET @EntityId = 477\nSET  @RowIdColumn = 'rowguid'\nSET  @DeltaColumn = 'ModifiedDate'\nSET  @DeltaOperator = '>='\n--DEBUG\n*/\n\n/*DECLARE CONSTANTS*/\n--DECLARE @RIDKEY VARCHAR(MAX) = 'EntityRowIdentifier'\nDECLARE @DeltaColumnKEY VARCHAR(MAX) = 'EntityDeltaColumn'\nDECLARE @DeltaOperatorKEY VARCHAR(MAX) = 'EntityDeltaOperator'\nDECLARE @DeltaValueKEY VARCHAR(MAX) = 'EntityDeltaValue'\nDECLARE @DeltaValueTypeKEY VARCHAR(MAX) = 'EntityDeltaValueType'\n\n\n/*DECLARE GLOBALS*/\nDECLARE @DataSetID BIGINT, @DeltaDataType VARCHAR(MAX)\nSET @DataSetID = (SELECT DataSetID FROM [Metadata].[Entity] WHERE id=@EntityId )\n\n/*GET Metadata*/\nSET @DeltaDataType =(\nSELECT v.[Value] \nfrom [Metadata].[Attribute] v\nINNER JOIN [Metadata].[Object] o on\to.id=v.Objectid \n\t\t\t\t\t\t\t\t\tAND o.[MetadataObjectName] = @DeltaColumn and v.[Key] = 'ObjectDataType'\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n\t\t\t\t\t\t\t\t\t)\n\nDELETE FROM [Metadata].[Attribute] \nWHERE ID IN (\nSELECT v.id \nfrom [Metadata].[Attribute] v\nWHERE  v.[Key] IN (@DeltaColumnKEY,@DeltaOperatorKEY,@DeltaValueKEY,@DeltaValueTypeKEY)\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n)\n\t\t\t\t\t\t\t\t\t\n\nINSERT INTO [Metadata].[Attribute] \n\t\t\t([EntityId]\n\t\t\t,[ObjectId]\n\t\t\t,[MetadataObjectHash]\n\t\t\t,[DataSetID]\n\t\t\t,[KEY]\n\t\t\t,[Value]\n\t\t\t,[KeyValueDataType]\n\t\t\t,[KeyValueRefreshDate]\n\t\t\t,[RecordProcessTimestamp]\n\t\t\t,[CreatedUTCTimestamp]\n\t\t\t)\n\nSELECT * FROM (\n/*SELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @RIDKEY\n      ,[Value] = @RowIdColumn \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL*/\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaColumnKEY\n      ,[Value] = @DeltaColumn\n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaOperatorKEY\n      ,[Value] = @DeltaOperator \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaValueKEY\n      ,[Value] = @DeltaSeedValue \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\n\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaValueTypeKEY\n      ,[Value] = @DeltaDataType \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\n) AS XX\n\nSELECT v.* \nfrom [Metadata].[Attribute] v\nWHERE  v.[Key] IN (@DeltaColumnKEY,@DeltaOperatorKEY,@DeltaValueKEY,@DeltaValueTypeKEY)\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n\nEND\nGO\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"poolName": "mesqldw",
				"databaseName": "mesqldw"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}