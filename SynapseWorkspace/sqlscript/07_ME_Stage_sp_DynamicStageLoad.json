{
	"name": "07_ME_Stage_sp_DynamicStageLoad",
	"properties": {
		"folder": {
			"name": "Run Me 2nd"
		},
		"content": {
			"query": "CREATE PROC [ME_Stage].[sp_DynamicStageLoad] @PARTITIONSTRING [VARCHAR](100),@DatasetID [INT] AS\nBEGIN\n\t/*DEBUG\n\t\tSET @PARTITIONSTRING='2021/01/07/15/23'\n\t\tSET @DatasetID=25\n*/\n\t/*DECLARE GLOBALS*/\n\tDECLARE @TARGETSCHEMA VARCHAR(100)\n\t\t,@STORAGE_ACCOUNT VARCHAR(500)\n\t\n\t\n\t/*SET GLOBAL PARAMETERS*/\n\tSET @STORAGE_ACCOUNT =(SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STORAGE_ACCOUNT')\n\tSET @TARGETSCHEMA = (SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STAGE_SCHEMA')\n\n\t/*DECLARE LOCAL PARAMETERS*/\n\tDECLARE @SQLCREATESTAGETABLE VARCHAR(MAX);\n\tDECLARE @SQLCOPYINTO VARCHAR(MAX);\n\tDECLARE @SQLSCHEMACREATE VARCHAR(MAX);\n\tDECLARE @SourceConnnectionName VARCHAR(250)\n\t\n\n\t/*Get Source Database / Connection Name for use in target table name*/\n\tSET @SourceConnnectionName = (\n\t\t\tSELECT TOP 1 [ConnectionName]\n\t\t\tFROM ME_CONFIG.Connection c\n\t\t\tINNER JOIN ME_Config.Dataset D ON D.ConnectionID = C.ID\n\t\t\t\tAND D.ID = @DatasetID\n\t\t\t)\n\t\n\n\n\t/*Ensure Stage schema exists as defined in MF_Config.Globals*/\n\tSET @SQLSCHEMACREATE = (SELECT REPLACE('BEGIN TRY DECLARE @X AS VARCHAR(4000) SET @X=¬CREATE SCHEMA '+@TARGETSCHEMA+' AUTHORIZATION dbo¬ EXEC (@X) END TRY BEGIN CATCH PRINT 1 END CATCH' ,'¬',''''))\n\t/*Flush Out Temp Tables*/\n\t\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\n\t\n\t/*Build out main metadata for dynamic SQL*/\n\n\tSELECT DISTINCT o.[Id]\n\t\t,o.[EntityId]\n\t\t,o.[DataSetID]\n\t\t,o.[MetadataObjectName]\n\t\t,o.[MetadataObjectOrder]\n\t\t,o.[MetadataObjectHash]\n\t\t,o.[MetadataObjectRefreshUTCTimeStamp]\n\t\t,o.[RecordProcessTimestamp]\n\t\t,o.[CreatedUTCTimestamp]\n\t\t,e.[TargetLake]\n\t\t,e.[LakeFolder]\n\t\t,e.[SchemaName]\n\t\t,EntityName = e.[Name]\n\t\t,[ObjectDataType] = DT.[Value]\n\t\t,[ObjectDataTypeSize] = DTL.[Value]\n\t\t,[ObjectDataTypePrecision] = DTP.[Value]\n\t\t,[ObjectDataTypeScale] = DTPS.[Value]\n\t\t,DATATYPE = [ME_Config].[fnGetDatatypedeff](DS.[DataSetType], DT.[Value], DTL.[Value], DTP.[Value], DTPS.[Value])\n\tINTO #TTBaseData\n\tFROM [Metadata].[Object] O\n\tINNER JOIN [ME_Config].[DataSet] DS ON O.DataSetId = DS.ID\n\tINNER JOIN Metadata.Entity E ON O.EntityId = E.id\n\t\tAND E.DatasetId = @DatasetID\n\tINNER JOIN [Metadata].[Attribute] DT ON o.id = DT.ObjectID\n\t\tAND DT.EntityId = E.id\n\t\tAND DT.[KEY] = 'ObjectDataType'\n\tINNER JOIN [Metadata].[Attribute] DTL ON o.id = DTL.ObjectID\n\t\tAND DTL.EntityId = E.id\n\t\tAND DTL.[KEY] = 'ObjectDataTypeSize'\n\tINNER JOIN [Metadata].[Attribute] DTP ON o.id = DTP.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTP.[KEY] = 'ObjectDataTypePrecision'\n\tINNER JOIN [Metadata].[Attribute] DTPS ON o.id = DTPS.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTPS.[KEY] = 'ObjectDataTypeScale'\n\n/*Build out Copy Into Statement*/\n\tSET @SQLCOPYINTO = (\n\t\t\tSELECT TOP 1 REPLACE('COPY INTO [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + ']\n  \n  FROM  ¬https://' + @STORAGE_ACCOUNT + '.dfs.core.windows.net/' + LOWER([TargetLake]) + CASE WHEN LEN([LakeFolder])=0 THEN '' ELSE '/' END + LOWER(REPLACE([LakeFolder], '\\', '/')) + CASE WHEN LEN(@PARTITIONSTRING)=0 THEN'' ELSE '/' END + LOWER(REPLACE(@PARTITIONSTRING, '\\', '/')) + '/*.parquet¬\n  WITH\n(\n\tFILE_TYPE = ¬PARQUET¬\n\t,MAXERRORS = 0\n\t,COMPRESSION = ¬snappy¬\n\t,IDENTITY_INSERT = ¬OFF¬\n)\n\n  ', '¬', '''')\n\t\t\tFROM #TTBaseData\n\t\t\t)\n\t\n\t/*Build Out Drop and Recreate of StageTable*/\n\tSET @SQLCREATESTAGETABLE = (\n\t\t\tSELECT 'BEGIN TRY DROP TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] END TRY BEGIN CATCH PRINT 1 END CATCH \n\t\tCREATE TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] \n\t\t( \n\t\t' + CONVERT(NVARCHAR(MAX), (\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tSTRING_AGG('[' + o.[MetadataObjectName] + '] ' + o.[DATATYPE] + ' ', ',') WITHIN GROUP (\n\t\t\t\t\t\t\t\t\tORDER BY o.[MetadataObjectOrder] ASC\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)) + ') WITH\n\t\t\t(\n\t\t\tDISTRIBUTION = ROUND_ROBIN,\n\t\t\t/*CLUSTERED COLUMNSTORE INDEX*/\n\t  \t\tHEAP\n\t\t\t)\n\t\t\t\n\t\t\t'\n\t\t\tFROM #TTBaseData o\n\t\t\tGROUP BY SchemaName\n\t\t\t\t,EntityName\n\t\t\t)\n\n\n/*Execute Dynamic SQL in sequence*/\n\n\n\tPRINT 'Creating Stage Table'\nprint @SQLCREATESTAGETABLE\n\tEXEC (@SQLCREATESTAGETABLE)\n\n\tPRINT 'Loading Stage Table'\n\n\tEXEC (@SQLCOPYINTO)\n\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\nEND\nGO\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"poolName": "mesqldw",
				"databaseName": "mesqldw"
			}
		},
		"type": "SqlQuery"
	}
}